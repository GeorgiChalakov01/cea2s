// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package part1

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/GeorgiChalakov01/cea2s/templates"
)

func Part1() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Part 1 Practice | CAE2S</title><link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\"><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"><style>\n\t\t:root {\n\t\t\t--dark-bg: #121212;\n\t\t\t--dark-card: #1e1e1e;\n\t\t\t--dark-purple: #4a1c7f;\n\t\t\t--medium-purple: #6a3da0;\n\t\t\t--light-purple: #8c5fc9;\n\t\t\t--accent-color: #b388ff;\n\t\t\t--text-primary: #f5f5f5;\n\t\t\t--text-secondary: #e0e0e0;\n\t\t}\n\t\t\n\t\t* {\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tbox-sizing: border-box;\n\t\t}\n\t\t\n\t\tbody {\n\t\t\tbackground: linear-gradient(135deg, var(--dark-bg) 0%, #1a1a2e 100%);\n\t\t\tcolor: var(--text-primary);\n\t\t\tfont-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n\t\t\tmin-height: 100vh;\n\t\t\toverflow-x: hidden;\n\t\t\tbackground-attachment: fixed;\n\t\t\tline-height: 1.6;\n\t\t}\n\t\t\n\t\t/* Navigation */\n\t\t.navbar {\n\t\t\tbackground: rgba(26, 26, 46, 0.95);\n\t\t\tbackdrop-filter: blur(10px);\n\t\t\tpadding: 1rem 2rem;\n\t\t\tborder-bottom: 1px solid rgba(106, 61, 160, 0.3);\n\t\t}\n\t\t\n\t\t.navbar-brand {\n\t\t\tfont-weight: 700;\n\t\t\tcolor: var(--accent-color) !important;\n\t\t\tfont-size: 1.5rem;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t}\n\t\t\n\t\t.navbar-brand i {\n\t\t\tmargin-right: 10px;\n\t\t\tfont-size: 1.8rem;\n\t\t}\n\t\t\n\t\t.logo-highlight {\n\t\t\tcolor: #fff;\n\t\t\tbackground: linear-gradient(90deg, var(--light-purple), var(--accent-color));\n\t\t\tpadding: 0 5px;\n\t\t\tborder-radius: 4px;\n\t\t\tmargin-left: 3px;\n\t\t}\n\t\t\n\t\t/* Mobile specific styles */\n\t\t@media (max-width: 768px) {\n\t\t\t.footer {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\toverflow: hidden;\n\t\t\t\theight: 100vh;\n\t\t\t}\n\t\t\t.practice-container {\n\t\t\t\theight: calc(100vh - 70px);\n\t\t\t\tmargin: 0 auto;\n\t\t\t\tborder-radius: 0;\n\t\t\t\tpadding: 1.5rem;\n\t\t\t}\n\t\t}\n\t\t\n\t\t.practice-container {\n\t\t\tmax-width: 800px;\n\t\t\tmargin: 2rem auto;\n\t\t\tpadding: 2rem;\n\t\t\tbackground: var(--dark-card);\n\t\t\tborder-radius: 15px;\n\t\t\tborder: 1px solid rgba(106, 61, 160, 0.3);\n\t\t\tbox-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n\t\t\tposition: relative;\n\t\t\toverflow: hidden;\n\t\t}\n\t\t\n\t\t.practice-container::before {\n\t\t\tcontent: \"\";\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 5px;\n\t\t\theight: 100%;\n\t\t\tbackground: linear-gradient(to bottom, var(--dark-purple), var(--light-purple));\n\t\t}\n\t\t\n\t\t.question-counter {\n\t\t\ttext-align: center;\n\t\t\tmargin-bottom: 2rem;\n\t\t\tcolor: var(--accent-color);\n\t\t\tfont-size: 1.2rem;\n\t\t}\n\t\t\n\t\t.status-indicator {\n\t\t\ttext-align: center;\n\t\t\tmargin: 2rem 0;\n\t\t\tfont-size: 1.5rem;\n\t\t\tmin-height: 60px;\n\t\t}\n\t\t\n\t\t.audio-container {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\tmargin: 2rem 0;\n\t\t}\n\t\t\n\t\t.audio-icon {\n\t\t\tfont-size: 4rem;\n\t\t\tcolor: var(--accent-color);\n\t\t\tcursor: pointer;\n\t\t\ttransition: all 0.3s ease;\n\t\t}\n\t\t\n\t\t.audio-icon.playing {\n\t\t\tanimation: pulse 1.5s infinite;\n\t\t}\n\t\t\n\t\t.recording-container {\n\t\t\ttext-align: center;\n\t\t\tmargin: 2rem 0;\n\t\t\tdisplay: none;\n\t\t}\n\t\t\n\t\t.recording-indicator {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\tmargin-bottom: 1.5rem;\n\t\t}\n\t\t\n\t\t.recording-dot {\n\t\t\twidth: 12px;\n\t\t\theight: 12px;\n\t\t\tbackground-color: #ff4d4d;\n\t\t\tborder-radius: 50%;\n\t\t\tmargin: 0 5px;\n\t\t\tanimation: bounce 1.5s infinite;\n\t\t}\n\t\t\n\t\t.recording-dot:nth-child(2) {\n\t\t\tanimation-delay: 0.2s;\n\t\t}\n\t\t\n\t\t.recording-dot:nth-child(3) {\n\t\t\tanimation-delay: 0.4s;\n\t\t}\n\t\t\n\t\t.stop-button {\n\t\t\tbackground: linear-gradient(135deg, #ff4d4d 0%, #ff1a1a 100%);\n\t\t\tcolor: white;\n\t\t\tborder: none;\n\t\t\tpadding: 1rem 2rem;\n\t\t\tborder-radius: 50px;\n\t\t\tfont-size: 1.2rem;\n\t\t\tfont-weight: 600;\n\t\t\tcursor: pointer;\n\t\t\ttransition: all 0.3s ease;\n\t\t\tdisplay: inline-flex;\n\t\t\talign-items: center;\n\t\t}\n\t\t\n\t\t.stop-button:hover {\n\t\t\ttransform: scale(1.05);\n\t\t\tbox-shadow: 0 5px 15px rgba(255, 77, 77, 0.4);\n\t\t}\n\t\t\n\t\t.stop-button i {\n\t\t\tmargin-right: 10px;\n\t\t}\n\t\t\n\t\t.progress-container {\n\t\t\tmargin-top: 2rem;\n\t\t}\n\t\t\n\t\t.progress-bar {\n\t\t\theight: 8px;\n\t\t\tbackground: rgba(106, 61, 160, 0.3);\n\t\t\tborder-radius: 4px;\n\t\t\toverflow: hidden;\n\t\t}\n\t\t\n\t\t.progress-fill {\n\t\t\theight: 100%;\n\t\t\tbackground: linear-gradient(90deg, var(--medium-purple), var(--light-purple));\n\t\t\twidth: 0%;\n\t\t\ttransition: width 0.5s ease;\n\t\t}\n\t\t\n\t\t@keyframes pulse {\n\t\t\t0% { transform: scale(1); }\n\t\t\t50% { transform: scale(1.1); }\n\t\t\t100% { transform: scale(1); }\n\t\t}\n\t\t\n\t\t@keyframes bounce {\n\t\t\t0%, 100% { transform: translateY(0); }\n\t\t\t50% { transform: translateY(-10px); }\n\t\t}\n\t\t\n\t\t.completed-message {\n\t\t\ttext-align: center;\n\t\t\tpadding: 2rem;\n\t\t\tdisplay: none;\n\t\t}\n\t\t\n\t\t.completed-icon {\n\t\t\tfont-size: 4rem;\n\t\t\tcolor: #4CAF50;\n\t\t\tmargin-bottom: 1rem;\n\t\t\tanimation: floating 3s ease-in-out infinite;\n\t\t}\n\t\t\n\t\t@keyframes floating {\n\t\t\t0% { transform: translateY(0px); }\n\t\t\t50% { transform: translateY(-15px); }\n\t\t\t100% { transform: translateY(0px); }\n\t\t}\n\t\t\n\t\t/* Footer */\n\t\t.footer {\n\t\t\tbackground: rgba(30, 30, 46, 0.95);\n\t\t\tpadding: 3rem 0 2rem;\n\t\t\tborder-top: 1px solid rgba(106, 61, 160, 0.3);\n\t\t}\n\t\t\n\t\t.footer-title {\n\t\t\tfont-size: 1.8rem;\n\t\t\tmargin-bottom: 1.5rem;\n\t\t\tcolor: var(--accent-color);\n\t\t}\n\t\t\n\t\t.company-info {\n\t\t\tfont-size: 0.9rem;\n\t\t\tcolor: var(--text-secondary);\n\t\t\tmargin-top: 1.5rem;\n\t\t\ttext-align: center;\n\t\t}\n\n\t\t/* Add styles for the start button */\n\t\t.start-container {\n\t\t\ttext-align: center;\n\t\t\tpadding: 3rem 0;\n\t\t}\n\t\t.start-button {\n\t\t\tbackground: linear-gradient(135deg, var(--dark-purple) 0%, var(--light-purple) 100%);\n\t\t\tcolor: white;\n\t\t\tfont-size: 1.5rem;\n\t\t\tfont-weight: 600;\n\t\t\tpadding: 1.2rem 2.5rem;\n\t\t\tborder: none;\n\t\t\tborder-radius: 15px;\n\t\t\tbox-shadow: 0 10px 25px rgba(106, 61, 160, 0.4);\n\t\t\ttransition: all 0.4s ease;\n\t\t\tposition: relative;\n\t\t\toverflow: hidden;\n\t\t\tz-index: 1;\n\t\t\tmargin: 2rem 0 3rem;\n\t\t\tborder: 2px solid var(--accent-color);\n\t\t\tletter-spacing: 1px;\n\t\t\tdisplay: inline-block;\n\t\t\ttext-decoration: none;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t.start-button:hover {\n\t\t\ttransform: translateY(-5px) scale(1.03);\n\t\t\tbox-shadow: 0 15px 30px rgba(106, 61, 160, 0.6);\n\t\t}\n\t</style></head><body><!-- Navigation -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templates.Navigation().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"container\"><div class=\"practice-container\"><div id=\"start-container\" class=\"start-container\"><h3>Part 1: Interview Practice</h3><p>You'll answer 10 personal questions. Each question will be played automatically.</p><button id=\"start-button\" class=\"start-button\"><i class=\"fas fa-play me-2\"></i> Start Practice</button><p class=\"text-muted\">Click \"Start Practice\" to begin. You'll need to allow microphone access.</p></div><div id=\"practice-content\" style=\"display:none;\"><div class=\"question-counter\">Question <span id=\"current-question\">1</span> of <span id=\"total-questions\">10</span></div><div class=\"status-indicator\" id=\"status-indicator\">Listen to the question...</div><div class=\"audio-container\"><div class=\"audio-icon\" id=\"audio-icon\"><i class=\"fas fa-headphones\"></i></div><audio id=\"question-audio\" preload=\"auto\"></audio></div><div class=\"recording-container\" id=\"recording-container\"><div class=\"recording-indicator\"><div class=\"recording-dot\"></div><div class=\"recording-dot\"></div><div class=\"recording-dot\"></div></div><p class=\"mb-3\">Recording your answer...</p><button class=\"stop-button\" id=\"stop-button\"><i class=\"fas fa-stop\"></i> Stop Recording</button></div><div class=\"progress-container\"><div class=\"progress-bar\"><div class=\"progress-fill\" id=\"progress-fill\"></div></div></div><div class=\"completed-message\" id=\"completed-message\"><div class=\"completed-icon\"><i class=\"fas fa-check-circle\"></i></div><h3>All Questions Completed!</h3><p>Your answers are being submitted...</p></div></div></div></div><!-- Footer -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templates.Footer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<script>\n\t\t\t// Get base URL for audio files\n\t\t\tconst baseUrl = window.location.origin;\n\t\t\t\n\t\t\t// Questions\n\t\t\tconst questions = [\n\t\t\t\t{ id: 1, question: \"Tell me about your hometown.\" },\n\t\t\t\t{ id: 2, question: \"What do you enjoy doing in your free time?\" },\n\t\t\t\t{ id: 3, question: \"How important is technology in your life?\" },\n\t\t\t\t{ id: 4, question: \"What kind of music do you like?\" },\n\t\t\t\t{ id: 5, question: \"Describe your ideal holiday destination.\" },\n\t\t\t\t{ id: 6, question: \"What are your career aspirations?\" },\n\t\t\t\t{ id: 7, question: \"How do you usually spend your weekends?\" },\n\t\t\t\t{ id: 8, question: \"Do you prefer reading books or watching movies? Why?\" },\n\t\t\t\t{ id: 9, question: \"What is your favorite season and why?\" },\n\t\t\t\t{ id: 10, question: \"How do you think education will change in the future?\" }\n\t\t\t];\n\n\t\t\tlet currentQuestion = 0;\n\t\t\tlet mediaRecorder;\n\t\t\tlet audioChunks = [];\n\n\t\t\t// DOM Elements\n\t\t\tconst startContainer = document.getElementById('start-container');\n\t\t\tconst startButton = document.getElementById('start-button');\n\t\t\tconst practiceContent = document.getElementById('practice-content');\n\t\t\tconst audioIcon = document.getElementById('audio-icon');\n\t\t\tconst audioElement = document.getElementById('question-audio');\n\t\t\tconst statusIndicator = document.getElementById('status-indicator');\n\t\t\tconst recordingContainer = document.getElementById('recording-container');\n\t\t\tconst stopButton = document.getElementById('stop-button');\n\t\t\tconst currentQuestionEl = document.getElementById('current-question');\n\t\t\tconst totalQuestionsEl = document.getElementById('total-questions');\n\t\t\tconst progressFill = document.getElementById('progress-fill');\n\t\t\tconst completedMessage = document.getElementById('completed-message');\n\n\t\t\t// Initialize\n\t\t\tfunction init() {\n\t\t\t\ttotalQuestionsEl.textContent = questions.length;\n\t\t\t\t\n\t\t\t\t// Set up event listeners\n\t\t\t\tstartButton.addEventListener('click', startPractice);\n\t\t\t\taudioElement.addEventListener('ended', startRecording);\n\t\t\t\tstopButton.addEventListener('click', stopRecording);\n\t\t\t}\n\n\t\t\t// Start practice\n\t\t\tfunction startPractice() {\n\t\t\t\t// Hide start button and show practice content\n\t\t\t\tstartContainer.style.display = 'none';\n\t\t\t\tpracticeContent.style.display = 'block';\n\t\t\t\t\n\t\t\t\t// Load the first question\n\t\t\t\tloadQuestion(currentQuestion);\n\t\t\t}\n\n\t\t\t// Load question\n\t\t\tfunction loadQuestion(index) {\n\t\t\t\tif (index >= questions.length) {\n\t\t\t\t\t// All questions completed\n\t\t\t\t\trecordingContainer.style.display = 'none';\n\t\t\t\t\tcompletedMessage.style.display = 'block';\n\t\t\t\t\t\n\t\t\t\t\t// Submit recordings to server (simulated)\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\talert(\"All recordings submitted successfully!\");\n\t\t\t\t\t\t// In real app: window.location.href = \"/results\";\n\t\t\t\t\t}, 3000);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentQuestionEl.textContent = index + 1;\n\t\t\t\tprogressFill.style.width = `${((index) / questions.length) * 100}%`;\n\t\t\t\t\n\t\t\t\tconst question = questions[index];\n\t\t\t\tconst audioUrl = `${baseUrl}/audio/${question.id}.mp3`;\n\t\t\t\taudioElement.src = audioUrl;\n\t\t\t\tstatusIndicator.textContent = \"Listen to the question...\";\n\t\t\t\taudioIcon.innerHTML = '<i class=\"fas fa-headphones\"></i>';\n\t\t\t\taudioIcon.classList.remove('playing');\n\t\t\t\trecordingContainer.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// Preload the audio\n\t\t\t\taudioElement.load();\n\t\t\t\t\n\t\t\t\t// Play after a short delay\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\taudioIcon.classList.add('playing');\n\t\t\t\t\taudioElement.play().catch(error => {\n\t\t\t\t\t\tconsole.error(\"Error playing audio:\", error);\n\t\t\t\t\t\t// If playback fails, move to recording after a delay\n\t\t\t\t\t\tsetTimeout(startRecording, 1000);\n\t\t\t\t\t});\n\t\t\t\t}, 1000);\n\t\t\t}\n\n\t\t\t// Start recording\n\t\t\tfunction startRecording() {\n\t\t\t\tstatusIndicator.textContent = \"Your turn to speak...\";\n\t\t\t\taudioIcon.classList.remove('playing');\n\t\t\t\taudioIcon.innerHTML = '<i class=\"fas fa-microphone\"></i>';\n\t\t\t\t\n\t\t\t\t// Show recording UI after a short delay\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\trecordingContainer.style.display = 'block';\n\t\t\t\t}, 500);\n\t\t\t\t\n\t\t\t\t// Start actual recording\n\t\t\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n\t\t\t\t\tnavigator.mediaDevices.getUserMedia({ audio: true })\n\t\t\t\t\t\t.then(stream => {\n\t\t\t\t\t\t\tmediaRecorder = new MediaRecorder(stream);\n\t\t\t\t\t\t\taudioChunks = [];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmediaRecorder.ondataavailable = event => {\n\t\t\t\t\t\t\t\taudioChunks.push(event.data);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmediaRecorder.onstop = () => {\n\t\t\t\t\t\t\t\tconst audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n\t\t\t\t\t\t\t\tsaveRecording(audioBlob);\n\t\t\t\t\t\t\t\tstream.getTracks().forEach(track => track.stop());\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmediaRecorder.start();\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tconsole.error(\"Error accessing microphone:\", error);\n\t\t\t\t\t\t\talert(\"Could not access microphone. Please ensure you've granted permission.\");\n\t\t\t\t\t\t\t// Simulate recording for demo\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tnextQuestion();\n\t\t\t\t\t\t\t}, 3000);\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"getUserMedia not supported\");\n\t\t\t\t\t// Simulate recording for demo\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tnextQuestion();\n\t\t\t\t\t}, 3000);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Stop recording\n\t\t\tfunction stopRecording() {\n\t\t\t\tif (mediaRecorder && mediaRecorder.state !== 'inactive') {\n\t\t\t\t\tmediaRecorder.stop();\n\t\t\t\t} else {\n\t\t\t\t\t// If there was an error starting recording, just move to next question\n\t\t\t\t\tnextQuestion();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Save recording (simulated)\n\t\t\tfunction saveRecording(blob) {\n\t\t\t\t// In a real app, you would send this to your server\n\t\t\t\t// along with the question ID\n\t\t\t\tconsole.log(`Saved recording for question ${questions[currentQuestion].id}`);\n\t\t\t\t\n\t\t\t\t// Create a mock delay to simulate saving\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tnextQuestion();\n\t\t\t\t}, 500);\n\t\t\t}\n\n\t\t\t// Move to next question\n\t\t\tfunction nextQuestion() {\n\t\t\t\tcurrentQuestion++;\n\t\t\t\tloadQuestion(currentQuestion);\n\t\t\t}\n\n\t\t\t// Initialize when page loads\n\t\t\tdocument.addEventListener('DOMContentLoaded', init);\n\t\t</script><script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
